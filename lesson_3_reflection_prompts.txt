When would you want to use a remote repository rather than keeping all your work
local?

    Remote repository will be useful when many people are working on the same 
    files at the same time. it is also useful when one work at different location
    on the same file i.e (home and work)

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    When working on a file, each commit ought to represent a logical process, 
    one might need to complete many logical process in
    order to complete a feature. Having git automatically synchronizing each
    commit might introduce a bug into the program. Another scenerio is when
    one is testing a feature locally, automatic syncing will make such feature
    available to others working on the same project.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are project that are available alone for cloning and not modification
    project obtained through forks can be modified and updated locally but can 
    not be updated at the source. a person working on forks can only suggest
    improvement to forks projects authors and taking such suggestion is at
    their discretion. 
    Clones is the process of copying a project along with the history of 
    commits and branches. Fork project are often cloned in other to create a  
    personalised copy which can be easily update and modified personally.
    Branches are created from the master or another branch in order to 
    experiment on certain feature one might not be totally convinced yet
    that it should be on main project. 
    Forks are exclusive to GitHub while clone can be done on local machine as
    well as github.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a last know state of the remote stored locally has the advantage of giving a basis for merge operations. Successful merge operations cannot be carried out automatically when the same part of the code are modified separately. Having a local copy ensures that the state of the file before modification is known and this is compared with others in order to generate conflict which the user need to resolve manually.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Collaboration without Git or Github will entail sharing the file with the collaborator. This implies that working on the shared files simultanously will lead to a tedious task when trying to merge and update the master copy. Doing it this way might introduce some bugs into the program but with Git and GitHub, merging and updating can be done seemlessly.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Creating a separate branch is useful when we want to add other features to the master branch but in the meantime we want the master branch to stay functional. Having extra branches makes safe experimenting on code work without worrying about breaking something. 
